#!/usr/bin/env python3
"""
Test de la version simplifi√©e de FESS sur le niveau Original 1.
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.level_management.level_collection_parser import LevelCollectionParser
from src.ai.fess_simple_working import SimpleFESS

def test_simple_fess():
    """Test de la version simplifi√©e."""
    print("üß™ Test FESS Simplifi√© - Original Level 1")
    print("=" * 50)
    
    # Charger le niveau
    original_path = os.path.join('src', 'levels', 'Original & Extra', 'Original.txt')
    
    if not os.path.exists(original_path):
        print(f"‚ùå Fichier non trouv√©: {original_path}")
        return False
    
    collection = LevelCollectionParser.parse_file(original_path)
    level_title, level = collection.get_level(0)
    
    print(f"üìã Niveau: {level_title}")
    print(f"   Taille: {level.width}x{level.height}")
    print(f"   Bo√Ætes: {len(level.boxes)}")
    print(f"   Cibles: {len(level.targets)}")
    
    # Afficher l'√©tat initial
    from src.ai.fess_simple_working import SimpleState
    initial_state = SimpleState(level)
    
    print(f"\nüéÆ √âtat initial:")
    print(f"   Joueur: {initial_state.player_pos}")
    print(f"   Bo√Ætes: {sorted(initial_state.boxes)}")
    print(f"   Cibles: {sorted(initial_state.targets)}")
    
    # Test de g√©n√©ration de moves
    from src.ai.fess_simple_working import SimpleFESSGenerator
    generator = SimpleFESSGenerator(initial_state)
    moves = generator.generate_moves()
    
    print(f"\nüéØ G√©n√©ration de moves:")
    print(f"   Moves g√©n√©r√©s: {len(moves)}")
    
    # Afficher les premiers moves
    for i, move in enumerate(moves[:10]):
        print(f"   {i+1}. {move} (poids: {move.weight})")
    
    # Cr√©er et tester l'algorithme
    print(f"\nüîç Test algorithme FESS simplifi√© (30s max):")
    fess = SimpleFESS(level, max_time=30.0)
    
    try:
        success, solution_moves, stats = fess.solve()
        
        print(f"\nüìä R√©sultats:")
        print(f"   Solution: {'‚úÖ TROUV√âE' if success else '‚ùå NON TROUV√âE'}")
        print(f"   Moves: {len(solution_moves)}")
        print(f"   N≈ìuds expans√©s: {stats['nodes_expanded']}")
        print(f"   Temps: {stats['time_elapsed']:.2f}s")
        
        if success:
            print(f"\nüéâ SOLUTION TROUV√âE!")
            print(f"üìù Macro moves de la solution:")
            
            # Afficher avec notation FESS
            from src.ai.fess_notation import FESSLevelAnalyzer
            analyzer = FESSLevelAnalyzer(level)
            notation_system = analyzer.notation
            
            for i, move in enumerate(solution_moves):
                start_notation = notation_system.coordinate_to_notation(move.box_start[0], move.box_start[1])
                end_notation = notation_system.coordinate_to_notation(move.box_end[0], move.box_end[1])
                print(f"   {i+1}. ({start_notation}) ‚Üí ({end_notation}) - {move.pushes} pouss√©es")
            
            total_pushes = sum(move.pushes for move in solution_moves)
            print(f"\nüìä Statistiques de la solution:")
            print(f"   ‚Ä¢ Total macro moves: {len(solution_moves)}")
            print(f"   ‚Ä¢ Total pouss√©es: {total_pushes}")
            print(f"   ‚Ä¢ Ratio compression: {total_pushes:.1f} pouss√©es ‚Üí {len(solution_moves)} macro moves")
            
            # V√©rifier si c'est raisonnable
            if total_pushes <= 200 and len(solution_moves) <= 20:
                print(f"   ‚úÖ Solution semble r√©aliste")
                return True
            else:
                print(f"   ‚ö†Ô∏è  Solution pourrait √™tre sous-optimale")
                return True  # Mais c'est quand m√™me une solution
        else:
            print(f"\n‚ùå Aucune solution trouv√©e")
            print(f"üîç Diagnostic:")
            print(f"   ‚Ä¢ Temps insuffisant ? (Essayer d'augmenter max_time)")
            print(f"   ‚Ä¢ G√©n√©ration de moves insuffisante ? ({len(moves)} moves)")
            print(f"   ‚Ä¢ D√©tection de deadlocks trop agressive ?")
            print(f"   ‚Ä¢ Algorithme de recherche √† am√©liorer ?")
            return False
            
    except Exception as e:
        print(f"\n‚ùå Erreur pendant l'ex√©cution: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_step_by_step():
    """Test √©tape par √©tape pour debug."""
    print(f"\nüîç Test √©tape par √©tape:")
    
    # Charger le niveau
    original_path = os.path.join('src', 'levels', 'Original & Extra', 'Original.txt')
    collection = LevelCollectionParser.parse_file(original_path)
    level_title, level = collection.get_level(0)
    
    from src.ai.fess_simple_working import SimpleState, SimpleFESSGenerator
    state = SimpleState(level)
    
    print(f"   √âtat initial: {len(state.boxes)} bo√Ætes")
    
    # Test 1: Positions accessibles
    reachable = state.get_reachable(state.player_pos)
    print(f"   Positions accessibles: {len(reachable)}")
    
    # Test 2: Features
    features = state.calculate_features()
    print(f"   Features: {features.boxes_on_targets} bo√Ætes sur cibles, {features.connectivity} r√©gions")
    
    # Test 3: Moves
    generator = SimpleFESSGenerator(state)
    moves = generator.generate_moves()
    priority_moves = [m for m in moves if m.weight == 0.0]
    regular_moves = [m for m in moves if m.weight > 0.0]
    
    print(f"   Moves prioritaires (vers cibles): {len(priority_moves)}")
    print(f"   Moves r√©guliers: {len(regular_moves)}")
    
    # Test 4: Application d'un move
    if moves:
        test_move = moves[0]
        print(f"   Test application move: {test_move}")
        
        fess = SimpleFESS(level)
        new_state = fess._apply_move(state, test_move)
        
        if new_state:
            print(f"   ‚úÖ Move appliqu√© avec succ√®s")
            new_features = new_state.calculate_features()
            print(f"   Nouvelles features: {new_features.boxes_on_targets} bo√Ætes sur cibles")
            
            deadlock = fess._is_simple_deadlock(new_state)
            print(f"   Deadlock d√©tect√©: {'Oui' if deadlock else 'Non'}")
        else:
            print(f"   ‚ùå √âchec application move")

def main():
    """Point d'entr√©e principal."""
    print("üéÆ Test Version Simplifi√©e FESS - Niveau Original 1")
    print("=" * 80)
    
    success = test_simple_fess()
    test_step_by_step()
    
    print(f"\nüìã R√âSUM√â FINAL:")
    if success:
        print("‚úÖ Version simplifi√©e FONCTIONNE et trouve une solution!")
        print("\nüéØ ACCOMPLISSEMENTS:")
        print("‚Ä¢ G√©n√©ration de macro moves r√©alistes")
        print("‚Ä¢ Application correcte des moves")
        print("‚Ä¢ Recherche qui trouve une solution")
        print("‚Ä¢ Compatible avec la notation FESS")
        
        print("\nüöÄ PROCHAINES √âTAPES:")
        print("‚Ä¢ Optimiser la recherche pour de meilleures solutions")
        print("‚Ä¢ Ajouter plus de strat√©gies de moves")
        print("‚Ä¢ Am√©liorer la d√©tection de deadlocks")
        print("‚Ä¢ Impl√©menter l'espace des features complet")
    else:
        print("‚ùå Probl√®mes persistent")
        print("\nüîß √Ä CORRIGER:")
        print("‚Ä¢ Augmenter le nombre de moves g√©n√©r√©s")
        print("‚Ä¢ Am√©liorer l'algorithme de recherche")
        print("‚Ä¢ Impl√©menter une meilleure heuristique")

if __name__ == "__main__":
    main()