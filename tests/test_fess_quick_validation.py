#!/usr/bin/env python3
"""
Test rapide de validation FESS sur des niveaux simples.

Ce test valide que notre impl√©mentation FESS authentique fonctionne
sur quelques niveaux faciles avant de passer aux 90 niveaux complets.
"""

import time
import sys
from pathlib import Path

# Ajouter le r√©pertoire src au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent / "src"))

from core.level import Level
from ai.authentic_fess import FESSSearchEngine


def test_simple_levels():
    """Test FESS sur des niveaux simples."""
    
    print("üî¨ TEST RAPIDE DE VALIDATION FESS AUTHENTIQUE")
    print("=" * 60)
    
    # Niveau 1 : tr√®s simple (micro-cosmos)
    level1_data = """
    ####
    #.@#
    #$ #
    ####
    """
    
    # Niveau 2 : simple avec 2 boxes
    level2_data = """
    #####
    #   #
    # $$#
    # ..#
    # @ #
    #####
    """
    
    # Niveau 3 : Le niveau 1 des 90 niveaux (premier vrai niveau)
    level3_data = """
    #####
    #   #
    #$  #
  ###  $##
  #  $ $ #
### # ## #   ######
#   # ## #####  ..#
# $  $          ..#
##### ### #@##  ..#
    #     #########
    #######
    """
    
    test_levels = [
        ("Micro-niveau", level1_data),
        ("Niveau simple", level2_data), 
        ("Niveau 1 Original", level3_data)
    ]
    
    total_solved = 0
    total_time = 0
    
    for i, (name, level_data) in enumerate(test_levels, 1):
        print(f"\n[{i}/3] Test: {name}")
        print("-" * 40)
        
        try:
            # Cr√©er le niveau
            level = Level(level_data=level_data.strip())
            print(f"   ‚úÖ Niveau cr√©√©: {level.width}x{level.height}")
            print(f"   üì¶ Boxes: {len(level.boxes)}, Targets: {len(level.targets)}")
            
            # Afficher le niveau
            print("   üó∫Ô∏è  Carte:")
            for line in level.get_state_string().split('\n'):
                print(f"      {line}")
            
            # Cr√©er et lancer FESS
            fess_engine = FESSSearchEngine(
                level=level,
                max_states=10000,  # Limite r√©duite pour test rapide
                time_limit=10.0    # 10 secondes max par niveau
            )
            
            print(f"   üî¨ Lancement FESS...")
            start_time = time.time()
            
            def progress_callback(message):
                print(f"      {message}")
            
            solution = fess_engine.search(progress_callback)
            solve_time = time.time() - start_time
            
            # R√©sultats
            stats = fess_engine.get_statistics()
            
            if solution:
                total_solved += 1
                total_time += solve_time
                print(f"   ‚úÖ R√âSOLU en {solve_time:.2f}s!")
                print(f"   üìã Solution: {len(solution)} mouvements")
                print(f"   üìä √âtats explor√©s: {stats['search_statistics']['states_explored']:,}")
                print(f"   üîß Cellules FS: {stats['feature_space_statistics']['total_cells']}")
                
                # Afficher la solution (si courte)
                if len(solution) <= 20:
                    print(f"   üéØ Mouvements: {' '.join(solution)}")
                else:
                    print(f"   üéØ Mouvements: {' '.join(solution[:10])}... (+{len(solution)-10})")
                    
            else:
                print(f"   ‚ùå √âchec apr√®s {solve_time:.2f}s")
                print(f"   üìä √âtats explor√©s: {stats['search_statistics']['states_explored']:,}")
                print(f"   ‚ö†Ô∏è  Limite atteinte")
            
        except Exception as e:
            print(f"   ‚ùå Erreur: {e}")
            import traceback
            traceback.print_exc()
    
    # Rapport final
    print("\n" + "=" * 60)
    print("üèÜ RAPPORT DE VALIDATION FESS")
    print("=" * 60)
    print(f"‚úÖ Niveaux r√©solus: {total_solved}/{len(test_levels)}")
    if total_solved > 0:
        print(f"‚ö° Temps total: {total_time:.2f}s")
        print(f"üìà Temps moyen: {total_time/total_solved:.2f}s par niveau")
    
    if total_solved == len(test_levels):
        print("\nüéØ VALIDATION R√âUSSIE!")
        print("   L'impl√©mentation FESS authentique fonctionne correctement.")
        print("   Pr√™t pour le benchmark complet des 90 niveaux!")
    elif total_solved > 0:
        print(f"\n‚ö†Ô∏è  VALIDATION PARTIELLE ({total_solved}/{len(test_levels)})")
        print("   L'impl√©mentation FESS fonctionne mais peut n√©cessiter des optimisations.")
    else:
        print("\n‚ùå VALIDATION √âCHOU√âE")
        print("   L'impl√©mentation FESS n√©cessite des corrections.")
    
    return total_solved == len(test_levels)


def test_fess_components():
    """Test des composants individuels de FESS."""
    
    print("\nüîß TEST DES COMPOSANTS FESS")
    print("=" * 40)
    
    # Cr√©er un niveau simple pour tester
    level_data = """
    ####
    #.@#
    #$ #
    ####
    """
    
    try:
        level = Level(level_data=level_data.strip())
        
        # Test 1: Cr√©ation du moteur FESS
        print("1. Cr√©ation du moteur FESS...")
        fess_engine = FESSSearchEngine(level, max_states=1000, time_limit=5.0)
        print("   ‚úÖ Moteur FESS cr√©√©")
        
        # Test 2: Analyseurs de features
        print("2. Test des analyseurs de features...")
        fs = fess_engine.feature_space
        
        # Test PackingAnalyzer
        print("   üì¶ PackingAnalyzer...")
        packing_stats = fs.packing_analyzer.get_statistics()
        print(f"      Targets: {packing_stats['total_targets']}")
        print(f"      Ordre optimal: {packing_stats['optimal_order']}")
        
        # Test ConnectivityAnalyzer  
        print("   üîó ConnectivityAnalyzer...")
        conn_stats = fs.connectivity_analyzer.get_statistics()
        print(f"      Espaces libres: {conn_stats['total_free_spaces']}")
        
        # Test RoomAnalyzer
        print("   üè† RoomAnalyzer...")
        room_stats = fs.room_analyzer.get_statistics()
        print(f"      Rooms d√©tect√©es: {room_stats['total_rooms']}")
        
        # Test OutOfPlanAnalyzer
        print("   ‚ö†Ô∏è  OutOfPlanAnalyzer...")
        oop_stats = fs.out_of_plan_analyzer.get_statistics()
        print(f"      Zones de risque: {oop_stats['total_risk_zones']}")
        
        print("   ‚úÖ Tous les analyseurs fonctionnent")
        
        # Test 3: Projection d'√©tat
        print("3. Test de projection d'√©tat...")
        from ai.authentic_fess import FESSState
        initial_state = FESSState(level.player_pos, frozenset(level.boxes))
        fs_coords = fs.project_state(initial_state)
        print(f"   √âtat initial projet√© vers: {fs_coords}")
        print("   ‚úÖ Projection d'√©tat fonctionne")
        
        # Test 4: Arbre de recherche
        print("4. Test de l'arbre de recherche...")
        tree = fess_engine.search_tree
        tree.add_root(initial_state)
        print(f"   √âtats dans l'arbre: {tree.total_states}")
        print("   ‚úÖ Arbre de recherche fonctionne")
        
        print("\n‚úÖ TOUS LES COMPOSANTS FONCTIONNENT!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR DANS LES COMPOSANTS: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """Point d'entr√©e principal."""
    
    print("üî¨ VALIDATION RAPIDE DE L'IMPL√âMENTATION FESS AUTHENTIQUE")
    print("Algorithme de Shoham & Schaeffer [2020]")
    print("=" * 70)
    
    # Test des composants
    components_ok = test_fess_components()
    
    if not components_ok:
        print("\n‚ùå Tests des composants √©chou√©s. Arr√™t.")
        return
    
    # Test sur niveaux simples
    validation_ok = test_simple_levels()
    
    if validation_ok:
        print("\nüöÄ PR√äT POUR LE BENCHMARK COMPLET!")
        print("Ex√©cutez: python test_fess_90_levels_benchmark.py")
    else:
        print("\nüîß Optimisations n√©cessaires avant le benchmark complet.")


if __name__ == "__main__":
    main()