#!/usr/bin/env python3
"""
Test de la version corrig√©e de l'algorithme FESS sur le niveau Original 1.
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.level_management.level_collection_parser import LevelCollectionParser
from src.ai.fess_fixed_algorithm import FESSFixedAlgorithm
from src.ai.fess_notation import FESSLevelAnalyzer

def test_fess_fixed_algorithm():
    """Test la version corrig√©e de l'algorithme FESS."""
    print("üîß Test FESS Fixed Algorithm - Niveau Original 1")
    print("=" * 60)
    
    # Charger le niveau
    original_path = os.path.join('../src', 'levels', 'Original & Extra', 'Original.txt')
    collection = LevelCollectionParser.parse_file(original_path)
    level_title, level = collection.get_level(0)
    
    print(f"üìã Niveau: {level_title}")
    print(f"   Taille: {level.width}x{level.height}")
    print(f"   Bo√Ætes: {len(level.boxes)} | Cibles: {len(level.targets)}")
    
    # Cr√©er l'algorithme FESS corrig√©
    fess = FESSFixedAlgorithm(level, max_time=30.0)
    
    print(f"\nüéØ Test de g√©n√©ration de macro moves corrig√©s:")
    initial_state = fess.initial_state
    
    # Test la g√©n√©ration de moves r√©alistes
    from src.ai.fess_fixed_algorithm import FESSMacroMoveGenerator
    generator = FESSMacroMoveGenerator(initial_state)
    moves = generator.generate_feasible_macro_moves()
    
    print(f"   Macro moves g√©n√©r√©s: {len(moves)}")
    print(f"   Premier move: {moves[0] if moves else 'Aucun'}")
    
    # Afficher quelques moves pour v√©rification
    for i, move in enumerate(moves[:5]):
        print(f"   {i+1}. {move.box_start} ‚Üí {move.box_end} (pushes: {move.pushes})")
    
    # Test des features
    features = fess.feature_calculator.calculate_features(initial_state)
    print(f"\nüìä Features initiales:")
    print(f"   Packing: {features.packing}")
    print(f"   Connectivity: {features.connectivity}")
    print(f"   Room connectivity: {features.room_connectivity}")
    print(f"   Out of plan: {features.out_of_plan}")
    
    # Test de l'algorithme de recherche
    print(f"\nüîç Recherche FESS (30 secondes max):")
    print("   D√©marrage de la recherche...")
    
    try:
        success, solution_moves, stats = fess.solve()
        
        print(f"\nüìä R√©sultats:")
        print(f"   Solution trouv√©e: {'‚úÖ OUI' if success else '‚ùå NON'}")
        print(f"   N≈ìuds expans√©s: {stats.get('nodes_expanded', 0)}")
        print(f"   Temps √©coul√©: {stats.get('time_elapsed', 0):.2f}s")
        print(f"   Taille espace features: {stats.get('feature_space_size', 0)}")
        
        if success:
            print(f"\nüéâ SOLUTION TROUV√âE!")
            print(f"   Nombre de macro moves: {len(solution_moves)}")
            
            # Calculer le total de pouss√©es
            total_pushes = sum(move.pushes for move in solution_moves)
            print(f"   Total pouss√©es: {total_pushes}")
            
            # Afficher la solution
            print(f"\nüìù Solution d√©taill√©e:")
            analyzer = FESSLevelAnalyzer(level)
            notation_system = analyzer.notation
            
            for i, move in enumerate(solution_moves):
                start_notation = notation_system.coordinate_to_notation(move.box_start[0], move.box_start[1])
                end_notation = notation_system.coordinate_to_notation(move.box_end[0], move.box_end[1])
                print(f"   {i+1}. ({start_notation}) ‚Üí ({end_notation}) - {move.pushes} pouss√©es")
            
            # V√©rifier si on peut valider la solution
            if total_pushes <= 150:  # Limite raisonnable
                print(f"\n‚úÖ Solution semble r√©aliste (‚â§150 pouss√©es)")
                return True
            else:
                print(f"\n‚ö†Ô∏è  Solution trop longue ({total_pushes} pouss√©es)")
                return False
        else:
            print(f"\n‚ùå Pas de solution trouv√©e")
            print(f"   Possibles causes:")
            print(f"   ‚Ä¢ Temps insuffisant")
            print(f"   ‚Ä¢ G√©n√©ration de moves incompl√®te")
            print(f"   ‚Ä¢ D√©tection de deadlocks trop agressive")
            return False
            
    except Exception as e:
        print(f"\n‚ùå Erreur pendant la recherche: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_specific_moves():
    """Test de moves sp√©cifiques pour debug."""
    print(f"\nüîç Test de moves sp√©cifiques:")
    
    # Charger le niveau
    original_path = os.path.join('../src', 'levels', 'Original & Extra', 'Original.txt')
    collection = LevelCollectionParser.parse_file(original_path)
    level_title, level = collection.get_level(0)
    
    fess = FESSFixedAlgorithm(level, max_time=5.0)
    initial_state = fess.initial_state
    
    print(f"   Position joueur: {initial_state.player_pos}")
    print(f"   Bo√Ætes: {sorted(initial_state.boxes)}")
    
    # Test si le joueur peut atteindre certaines positions
    reachable = initial_state.get_reachable_positions(initial_state.player_pos)
    print(f"   Positions accessibles: {len(reachable)}")
    
    # Test move simple
    from src.ai.fess_fixed_algorithm import FESSMacroMoveGenerator
    generator = FESSMacroMoveGenerator(initial_state)
    moves = generator.generate_feasible_macro_moves()
    
    if moves:
        test_move = moves[0]
        print(f"   Test move: {test_move}")
        
        # Appliquer le move
        new_state = fess._apply_move(initial_state, test_move)
        if new_state:
            print(f"   ‚úÖ Move appliqu√© avec succ√®s")
            print(f"   Nouvelle position joueur: {new_state.player_pos}")
            print(f"   Deadlock: {'Oui' if new_state.is_deadlock() else 'Non'}")
        else:
            print(f"   ‚ùå Move invalide")

def main():
    """Point d'entr√©e principal."""
    print("üß™ Test Version Corrig√©e FESS Algorithm")
    print("=" * 80)
    
    success1 = test_fess_fixed_algorithm()
    test_specific_moves()
    
    print(f"\nüìã R√âSUM√â:")
    if success1:
        print("‚úÖ Version corrig√©e fonctionne et trouve une solution")
        print("\nüéØ AM√âLIORATIONS R√âALIS√âES:")
        print("‚Ä¢ Macro moves r√©alistes (1-3 pouss√©es max)")
        print("‚Ä¢ V√©rification correcte des chemins")
        print("‚Ä¢ Position du joueur mise √† jour correctement")
        print("‚Ä¢ D√©tection de deadlocks basique")
        print("‚Ä¢ G√©n√©ration optimis√©e de moves")
    else:
        print("‚ùå Probl√®mes persistent - n√©cessite plus de debugging")
        print("\nüîß ACTIONS SUIVANTES:")
        print("‚Ä¢ Analyser la g√©n√©ration de moves plus en d√©tail")
        print("‚Ä¢ Am√©liorer la d√©tection de deadlocks")
        print("‚Ä¢ Optimiser l'heuristique de recherche")

if __name__ == "__main__":
    main()