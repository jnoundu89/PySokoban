#!/usr/bin/env python3
"""
Test simple de l'algorithme FESS avec debug basique.

Ce script teste l'algorithme FESS de mani√®re plus directe pour identifier
et corriger les probl√®mes de boucle infinie observ√©s dans le debug visuel.
"""

import sys
import os
import time

# Add the src directory to the path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.level_management.level_collection_parser import LevelCollectionParser
from src.ai.authentic_fess_algorithm import FESSAlgorithm, SokobanState
from src.ai.fess_notation import FESSLevelAnalyzer

def test_fess_algorithm_basic():
    """Test basique de l'algorithme FESS."""
    print("üî¨ Test Basique de l'Algorithme FESS")
    print("=" * 50)
    
    # Charger le niveau 1 original
    original_path = os.path.join('../src', 'levels', 'Original & Extra', 'Original.txt')
    
    if not os.path.exists(original_path):
        print(f"‚ùå Fichier non trouv√©: {original_path}")
        return False
    
    try:
        # Parser la collection et obtenir le niveau 1
        collection = LevelCollectionParser.parse_file(original_path)
        level_title, level = collection.get_level(0)
        
        print(f"üìã Niveau: {level_title}")
        print(f"üìè Taille: {level.width}x{level.height}")
        print(f"üì¶ Bo√Ætes: {len(level.boxes)}")
        print(f"üéØ Cibles: {len(level.targets)}")
        
        # Afficher le niveau
        print(f"\nüó∫Ô∏è  Niveau avec Coordonn√©es FESS:")
        print(level.get_state_string(show_fess_coordinates=True))
        
        # Analyser l'√©tat initial
        initial_state = SokobanState(level)
        print(f"\nüìä √âtat Initial:")
        print(f"  ‚Ä¢ Joueur: {initial_state.player_pos}")
        print(f"  ‚Ä¢ Bo√Ætes: {sorted(initial_state.boxes)}")
        print(f"  ‚Ä¢ Cibles: {sorted(initial_state.targets)}")
        
        # Cr√©er l'analyseur FESS
        analyzer = FESSLevelAnalyzer(level)
        
        # Tester les features
        features = analyzer.get_features_analysis()
        print(f"\nüß† Features FESS:")
        for feature_name, value in features.items():
            print(f"  ‚Ä¢ {feature_name}: {value}")
        
        # Tester l'algorithme FESS avec un temps court
        print(f"\nüöÄ Test de l'Algorithme FESS (10s)...")
        fess = FESSAlgorithm(level, max_time=10.0)
        
        start_time = time.time()
        success, moves, stats = fess.solve()
        elapsed_time = time.time() - start_time
        
        print(f"\nüìä R√©sultats:")
        print(f"  ‚Ä¢ Succ√®s: {'‚úÖ' if success else '‚ùå'}")
        print(f"  ‚Ä¢ Temps: {elapsed_time:.2f}s")
        print(f"  ‚Ä¢ Macro moves: {len(moves) if success else 0}")
        print(f"  ‚Ä¢ N≈ìuds explor√©s: {stats.get('nodes_expanded', 0)}")
        print(f"  ‚Ä¢ Taille espace features: {stats.get('feature_space_size', 0)}")
        
        # Afficher la solution si trouv√©e
        if success and moves:
            print(f"\nüìù Solution Trouv√©e:")
            for i, move in enumerate(moves):
                start_coord = analyzer.notation.coordinate_to_notation(move.box_start[0], move.box_start[1])
                end_coord = analyzer.notation.coordinate_to_notation(move.box_end[0], move.box_end[1])
                print(f"  {i+1}. {start_coord} ‚Üí {end_coord}")
        
        return success
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_macro_moves_generation():
    """Test de la g√©n√©ration des macro moves."""
    print(f"\nüéØ Test de G√©n√©ration des Macro Moves")
    print("-" * 40)
    
    # Charger le niveau
    original_path = os.path.join('../src', 'levels', 'Original & Extra', 'Original.txt')
    collection = LevelCollectionParser.parse_file(original_path)
    level_title, level = collection.get_level(0)
    
    # Cr√©er l'√©tat initial
    initial_state = SokobanState(level)
    
    # Cr√©er l'algorithme FESS
    fess = FESSAlgorithm(level, max_time=5.0)
    
    # Tester la g√©n√©ration de macro moves
    print(f"üì¶ G√©n√©ration des Macro Moves:")
    macro_moves = fess._generate_all_macro_moves(initial_state)
    print(f"  ‚Ä¢ Nombre total: {len(macro_moves)}")
    
    # Afficher les premiers macro moves
    analyzer = FESSLevelAnalyzer(level)
    print(f"  ‚Ä¢ Premiers 10 macro moves:")
    for i, move in enumerate(macro_moves[:10]):
        start_coord = analyzer.notation.coordinate_to_notation(move.box_start[0], move.box_start[1])
        end_coord = analyzer.notation.coordinate_to_notation(move.box_end[0], move.box_end[1])
        print(f"    {i+1}. {start_coord} ‚Üí {end_coord} (poids: {move.weight})")
    
    # Tester les conseillers
    advisor_moves = fess.advisor.get_advisor_moves(initial_state, fess.feature_calculator.calculate_features(initial_state))
    print(f"\nü§ñ Conseillers:")
    print(f"  ‚Ä¢ Nombre de recommandations: {len(advisor_moves)}")
    for i, move in enumerate(advisor_moves):
        start_coord = analyzer.notation.coordinate_to_notation(move.box_start[0], move.box_start[1])
        end_coord = analyzer.notation.coordinate_to_notation(move.box_end[0], move.box_end[1])
        print(f"    {i+1}. {start_coord} ‚Üí {end_coord} (poids: {move.weight})")

def test_state_transitions():
    """Test des transitions d'√©tat."""
    print(f"\nüîÑ Test des Transitions d'√âtat")
    print("-" * 40)
    
    # Charger le niveau
    original_path = os.path.join('../src', 'levels', 'Original & Extra', 'Original.txt')
    collection = LevelCollectionParser.parse_file(original_path)
    level_title, level = collection.get_level(0)
    
    # √âtat initial
    initial_state = SokobanState(level)
    fess = FESSAlgorithm(level, max_time=5.0)
    analyzer = FESSLevelAnalyzer(level)
    
    print(f"üìä √âtat Initial:")
    print(f"  ‚Ä¢ Features: {fess.feature_calculator.calculate_features(initial_state).to_tuple()}")
    
    # Tester un macro move
    advisor_moves = fess.advisor.get_advisor_moves(initial_state, fess.feature_calculator.calculate_features(initial_state))
    if advisor_moves:
        move = advisor_moves[0]
        start_coord = analyzer.notation.coordinate_to_notation(move.box_start[0], move.box_start[1])
        end_coord = analyzer.notation.coordinate_to_notation(move.box_end[0], move.box_end[1])
        
        print(f"\nüéØ Test du Mouvement: {start_coord} ‚Üí {end_coord}")
        
        # Appliquer le mouvement
        new_state = fess._apply_move(initial_state, move)
        
        if new_state:
            new_features = fess.feature_calculator.calculate_features(new_state)
            print(f"‚úÖ Mouvement appliqu√© avec succ√®s")
            print(f"  ‚Ä¢ Nouvelles features: {new_features.to_tuple()}")
            print(f"  ‚Ä¢ Nouvelle position joueur: {new_state.player_pos}")
            print(f"  ‚Ä¢ Nouvelles positions bo√Ætes: {sorted(new_state.boxes)}")
        else:
            print(f"‚ùå Mouvement invalide")

def test_expected_solution():
    """Test avec la solution attendue du document de recherche."""
    print(f"\nüìö Test avec Solution Attendue du Document")
    print("-" * 50)
    
    # Charger le niveau
    original_path = os.path.join('../src', 'levels', 'Original & Extra', 'Original.txt')
    collection = LevelCollectionParser.parse_file(original_path)
    level_title, level = collection.get_level(0)
    
    # Cr√©er l'analyseur
    analyzer = FESSLevelAnalyzer(level)
    
    # Cr√©er la notation attendue
    notation = analyzer.create_original_level1_notation()
    
    print(f"üìù Solution Attendue (Document de Recherche):")
    solution_text = notation.get_solution_notation(97, 250)
    print(solution_text)
    
    # V√©rifier que les coordonn√©es sont correctes
    print(f"\n‚úÖ V√©rification des Coordonn√©es:")
    for i, macro_move in enumerate(notation.macro_moves):
        start_coord = analyzer.notation.coordinate_to_notation(macro_move.start_pos[0], macro_move.start_pos[1])
        end_coord = analyzer.notation.coordinate_to_notation(macro_move.end_pos[0], macro_move.end_pos[1])
        print(f"  {i+1}. ({start_coord}) ‚Üí ({end_coord}) - {macro_move.description}")

def main():
    """Lance les tests de debug de l'algorithme FESS."""
    print("üî¨ FESS Algorithm Debug Tests")
    print("=" * 60)
    print("Tests pour identifier et corriger les probl√®mes de l'algorithme FESS")
    print("=" * 60)
    
    tests = [
        ("Solution Attendue", test_expected_solution),
        ("G√©n√©ration Macro Moves", test_macro_moves_generation),
        ("Transitions d'√âtat", test_state_transitions),
        ("Algorithme FESS Basique", test_fess_algorithm_basic),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = test_func()
            results.append((test_name, result if result is not None else True))
        except Exception as e:
            print(f"‚ùå {test_name} a √©chou√©: {e}")
            results.append((test_name, False))
    
    # R√©sum√©
    print(f"\n" + "="*60)
    print(f"üìä R√âSUM√â DES TESTS")
    print(f"="*60)
    
    for test_name, result in results:
        status = "‚úÖ SUCC√àS" if result else "‚ùå √âCHEC"
        print(f"{status:<12} {test_name}")
    
    successful_tests = sum(1 for _, result in results if result)
    total_tests = len(results)
    
    print(f"\nüéØ R√©sultat Global: {successful_tests}/{total_tests} tests r√©ussis")
    
    if successful_tests == total_tests:
        print(f"üéâ Tous les tests sont pass√©s!")
        print(f"üîß L'algorithme FESS semble fonctionner correctement")
    else:
        print(f"‚ö†Ô∏è  Certains tests ont √©chou√©")
        print(f"üîç Il faut continuer le debug")

if __name__ == "__main__":
    main()