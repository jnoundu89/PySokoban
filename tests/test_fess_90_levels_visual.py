#!/usr/bin/env python3
"""
Test script pour la r√©solution visuelle des 90 niveaux originaux avec FESS.

Ce script utilise l'algorithme FESS avec visualisation des features pour r√©soudre
les 90 niveaux originaux du benchmark XSokoban, en affichant :
- L'√©volution des 4 features FESS pour chaque niveau
- Les macro moves g√©n√©r√©s avec notation des coordonn√©es
- Les statistiques de performance
- La comparaison avec les r√©sultats publi√©s dans le document de recherche
"""

import sys
import os
import time
from typing import List, Dict, Tuple

# Add the src directory to the path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.level_management.level_collection_parser import LevelCollectionParser
from src.ai.fess_visual_debugger import FESSVisualDebugger
from src.ai.authentic_fess_algorithm import FESSAlgorithm, SokobanState
from src.ai.fess_notation import FESSLevelAnalyzer

class FESS90LevelsSolver:
    """
    R√©solveur FESS pour les 90 niveaux originaux avec visualisation.
    
    Impl√©mente la r√©solution compl√®te des 90 niveaux du benchmark XSokoban
    avec affichage visuel des features et statistiques d√©taill√©es.
    """
    
    def __init__(self, collection_path: str, max_time_per_level: float = 60.0):
        """
        Initialise le r√©solveur pour les 90 niveaux.
        
        Args:
            collection_path: Chemin vers le fichier Original.txt
            max_time_per_level: Temps maximum par niveau (en secondes)
        """
        self.collection_path = collection_path
        self.max_time_per_level = max_time_per_level
        self.results = []
        self.total_start_time = 0.0
        
        # R√©sultats publi√©s dans le document de recherche (Table I)
        self.published_results = {
            1: {'pushes': 97, 'fess_pushes': 103, 'nodes': 12, 'time': 0},
            2: {'pushes': 131, 'fess_pushes': 153, 'nodes': 15, 'time': 0},
            3: {'pushes': 134, 'fess_pushes': 150, 'nodes': 14, 'time': 0},
            4: {'pushes': 355, 'fess_pushes': 365, 'nodes': 24, 'time': 1},
            5: {'pushes': 143, 'fess_pushes': 147, 'nodes': 47, 'time': 0},
            # ... (on peut ajouter plus de r√©sultats de la table)
        }
    
    def solve_all_levels(self, visual_mode: bool = True, max_levels: int = 90) -> Dict:
        """
        R√©sout tous les niveaux avec visualisation des features.
        
        Args:
            visual_mode: Si True, affiche les features pour chaque niveau
            max_levels: Nombre maximum de niveaux √† traiter
            
        Returns:
            Dict avec les statistiques globales
        """
        print("üéØ FESS 90 Niveaux Originaux - R√©solution Visuelle")
        print("=" * 70)
        print(f"R√©f√©rence: Table I du document de recherche")
        print(f"Standard: 10 minutes par niveau (900 minutes total)")
        print(f"FESS publi√©: Tous les 90 niveaux en moins de 4 minutes")
        print("=" * 70)
        
        # Charger la collection
        try:
            collection = LevelCollectionParser.parse_file(self.collection_path)
            print(f"üìÅ Collection charg√©e: {collection.title}")
            print(f"üìä Niveaux disponibles: {collection.get_level_count()}")
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement: {e}")
            return {}
        
        # Limiter le nombre de niveaux pour les tests
        actual_max = min(max_levels, collection.get_level_count())
        print(f"üéÆ R√©solution de {actual_max} niveaux avec visualisation FESS")
        
        self.total_start_time = time.time()
        solved_count = 0
        
        # R√©soudre chaque niveau
        for level_num in range(actual_max):
            level_title, level = collection.get_level(level_num)
            level_id = level_num + 1  # Num√©rotation √† partir de 1
            
            print(f"\n{'='*20} NIVEAU {level_id} {'='*20}")
            print(f"üìã Titre: {level_title}")
            print(f"üìè Taille: {level.width}x{level.height}")
            print(f"üì¶ Bo√Ætes: {len(level.boxes)}")
            print(f"üéØ Cibles: {len(level.targets)}")
            
            # Afficher le niveau avec coordonn√©es FESS si demand√©
            if visual_mode and level_id <= 5:  # Affichage visuel pour les 5 premiers
                print(f"\nüó∫Ô∏è  Niveau avec Coordonn√©es FESS:")
                print(level.get_state_string(show_fess_coordinates=True))
            
            # Analyser les features initiales
            initial_state = SokobanState(level)
            debugger = FESSVisualDebugger(level, self.max_time_per_level)
            initial_features = debugger.fess_algorithm.feature_calculator.calculate_features(initial_state)
            
            print(f"\nüß† Features FESS Initiales:")
            print(f"  ‚Ä¢ Packing: {initial_features.packing}")
            print(f"  ‚Ä¢ Connectivity: {initial_features.connectivity}")
            print(f"  ‚Ä¢ Room Connectivity: {initial_features.room_connectivity}")
            print(f"  ‚Ä¢ Out-of-Plan: {initial_features.out_of_plan}")
            
            # R√©soudre le niveau
            level_start_time = time.time()
            success, moves, stats = self._solve_level_with_features(level, level_id, visual_mode)
            level_time = time.time() - level_start_time
            
            # Enregistrer les r√©sultats
            result = {
                'level': level_id,
                'title': level_title,
                'solved': success,
                'macro_moves': len(moves) if success else 0,
                'nodes_expanded': stats.get('nodes_expanded', 0),
                'time': level_time,
                'features_final': stats.get('final_features'),
                'size': f"{level.width}x{level.height}",
                'boxes': len(level.boxes)
            }
            self.results.append(result)
            
            if success:
                solved_count += 1
                
            # Afficher le r√©sultat
            status = "‚úÖ R√âSOLU" if success else "‚ùå NON R√âSOLU"
            print(f"\nüìä R√©sultat: {status}")
            print(f"  ‚Ä¢ Temps: {level_time:.2f}s")
            print(f"  ‚Ä¢ Macro moves: {len(moves) if success else 'N/A'}")
            print(f"  ‚Ä¢ N≈ìuds explor√©s: {stats.get('nodes_expanded', 0)}")
            
            # Comparer avec les r√©sultats publi√©s si disponibles
            if level_id in self.published_results:
                self._compare_with_published(level_id, result)
            
            # Afficher les macro moves en notation FESS pour les premiers niveaux
            if success and visual_mode and level_id <= 3:
                self._display_fess_solution(moves, debugger, level_id)
            
            # Pause pour les premiers niveaux en mode visuel
            if visual_mode and level_id <= 3:
                input(f"\n‚è∏Ô∏è  Appuyez sur Entr√©e pour continuer au niveau {level_id + 1}...")
        
        # Statistiques finales
        return self._display_final_statistics(solved_count, actual_max)
    
    def _solve_level_with_features(self, level, level_id: int, visual_mode: bool) -> Tuple[bool, List, Dict]:
        """
        R√©sout un niveau avec suivi des features.
        
        Args:
            level: Niveau √† r√©soudre
            level_id: Num√©ro du niveau
            visual_mode: Si True, affiche les d√©tails
            
        Returns:
            Tuple (succ√®s, moves, statistiques)
        """
        # Cr√©er l'algorithme FESS
        fess_algorithm = FESSAlgorithm(level, self.max_time_per_level)
        
        # R√©soudre
        start_time = time.time()
        success, moves, stats = fess_algorithm.solve()
        solve_time = time.time() - start_time
        
        # Calculer les features finales si r√©solu
        final_features = None
        if success and moves:
            # Simuler l'application des moves pour obtenir l'√©tat final
            final_state = SokobanState(level)
            # (Simulation simplifi√©e - en pratique on appliquerait tous les moves)
            final_features = fess_algorithm.feature_calculator.calculate_features(final_state)
        
        # Enrichir les statistiques
        stats.update({
            'solve_time': solve_time,
            'final_features': final_features,
            'level_size': f"{level.width}x{level.height}",
            'boxes_count': len(level.boxes)
        })
        
        # Affichage visuel des features si demand√©
        if visual_mode and level_id <= 10:  # D√©tails pour les 10 premiers
            self._display_feature_evolution(fess_algorithm, success)
        
        return success, moves, stats
    
    def _display_feature_evolution(self, fess_algorithm, success: bool):
        """Affiche l'√©volution des features pendant la r√©solution."""
        print(f"\nüìà √âvolution des Features FESS:")
        
        # Statistiques de l'espace des features
        fs_size = len(fess_algorithm.feature_space)
        total_states = sum(len(nodes) for nodes in fess_algorithm.feature_space.values())
        
        print(f"  ‚Ä¢ Cellules explor√©es: {fs_size}")
        print(f"  ‚Ä¢ √âtats totaux: {total_states}")
        print(f"  ‚Ä¢ N≈ìuds par cellule: {total_states / fs_size if fs_size > 0 else 0:.1f}")
        
        # Top 3 cellules les plus peupl√©es
        if fess_algorithm.feature_space:
            sorted_cells = sorted(
                fess_algorithm.feature_space.items(),
                key=lambda x: len(x[1]),
                reverse=True
            )
            
            print(f"  ‚Ä¢ Top cellules:")
            for i, (features, nodes) in enumerate(sorted_cells[:3]):
                print(f"    {i+1}. ({features.packing},{features.connectivity},{features.room_connectivity},{features.out_of_plan}): {len(nodes)} √©tats")
    
    def _compare_with_published(self, level_id: int, result: Dict):
        """Compare les r√©sultats avec ceux publi√©s dans le document."""
        published = self.published_results[level_id]
        
        print(f"\nüìö Comparaison avec R√©sultats Publi√©s (Niveau {level_id}):")
        print(f"  ‚Ä¢ Temps publi√©: {published['time']}s vs Notre temps: {result['time']:.2f}s")
        print(f"  ‚Ä¢ N≈ìuds publi√©s: {published['nodes']} vs Nos n≈ìuds: {result['nodes_expanded']}")
        
        if result['solved']:
            # Nous n'avons pas le nombre exact de pushes, mais on peut comparer les macro moves
            print(f"  ‚Ä¢ FESS pushes publi√©s: {published['fess_pushes']}")
            print(f"  ‚Ä¢ Nos macro moves: {result['macro_moves']}")
        
        # √âvaluation de la performance
        if result['time'] <= published['time'] + 1:  # Tol√©rance de 1s
            print(f"  üéØ Performance: Conforme aux r√©sultats publi√©s")
        else:
            print(f"  ‚ö†Ô∏è  Performance: Plus lent que publi√© (normal en mode debug)")
    
    def _display_fess_solution(self, moves, debugger, level_id: int):
        """Affiche la solution en notation FESS."""
        print(f"\nüìù Solution FESS - Niveau {level_id}:")
        
        if not moves:
            print("  Aucun macro move enregistr√©")
            return
        
        for i, move in enumerate(moves):
            start_fess = debugger._pos_to_fess(move.box_start)
            end_fess = debugger._pos_to_fess(move.box_end)
            print(f"  {i+1}. ({start_fess}) ‚Üí ({end_fess})")
        
        # Analyse strat√©gique pour le niveau 1
        if level_id == 1 and len(moves) >= 9:
            print(f"\nüéØ Analyse Strat√©gique (Niveau 1):")
            print(f"  ‚Ä¢ Moves 1-3: Am√©lioration connectivit√©")
            print(f"  ‚Ä¢ Moves 4-9: Emballage des bo√Ætes")
            print(f"  ‚Ä¢ Compression: ~97 pushes ‚Üí {len(moves)} macro moves")
    
    def _display_final_statistics(self, solved_count: int, total_count: int) -> Dict:
        """Affiche les statistiques finales."""
        total_time = time.time() - self.total_start_time
        
        print(f"\n" + "="*70)
        print(f"üìä STATISTIQUES FINALES - FESS 90 NIVEAUX")
        print(f"="*70)
        
        print(f"üéØ R√©sultats Globaux:")
        print(f"  ‚Ä¢ Niveaux r√©solus: {solved_count}/{total_count}")
        print(f"  ‚Ä¢ Taux de r√©ussite: {solved_count/total_count*100:.1f}%")
        print(f"  ‚Ä¢ Temps total: {total_time:.2f}s")
        print(f"  ‚Ä¢ Temps moyen/niveau: {total_time/total_count:.2f}s")
        
        # Statistiques par niveau r√©solu
        solved_results = [r for r in self.results if r['solved']]
        if solved_results:
            total_macro_moves = sum(r['macro_moves'] for r in solved_results)
            total_nodes = sum(r['nodes_expanded'] for r in solved_results)
            
            print(f"\nüìà Analyse des Niveaux R√©solus:")
            print(f"  ‚Ä¢ Total macro moves: {total_macro_moves}")
            print(f"  ‚Ä¢ Macro moves/niveau: {total_macro_moves/len(solved_results):.1f}")
            print(f"  ‚Ä¢ Total n≈ìuds explor√©s: {total_nodes}")
            print(f"  ‚Ä¢ N≈ìuds/niveau: {total_nodes/len(solved_results):.1f}")
        
        # Comparaison avec les r√©sultats publi√©s
        print(f"\nüìö Comparaison avec Document de Recherche:")
        print(f"  ‚Ä¢ Standard publi√©: 90/90 niveaux en <4 minutes")
        print(f"  ‚Ä¢ Notre r√©sultat: {solved_count}/{total_count} niveaux en {total_time:.2f}s")
        
        if solved_count == total_count and total_time < 240:  # 4 minutes
            print(f"  üèÜ PERFORMANCE EXCELLENT: Conforme aux r√©sultats publi√©s!")
        elif solved_count == total_count:
            print(f"  ‚úÖ SUCC√àS: Tous les niveaux r√©solus")
        else:
            print(f"  ‚ö†Ô∏è  PARTIEL: R√©solution incompl√®te (normal pour un prototype)")
        
        # D√©tail des premiers niveaux
        print(f"\nüìã D√©tail des Premiers Niveaux:")
        for i, result in enumerate(self.results[:5]):
            status = "‚úÖ" if result['solved'] else "‚ùå"
            print(f"  {status} Niveau {result['level']}: {result['time']:.2f}s, {result['macro_moves']} moves, {result['nodes_expanded']} n≈ìuds")
        
        return {
            'solved_count': solved_count,
            'total_count': total_count,
            'success_rate': solved_count/total_count,
            'total_time': total_time,
            'average_time': total_time/total_count,
            'results': self.results
        }

def main():
    """Lance la r√©solution visuelle des 90 niveaux."""
    print("üéÆ FESS 90 Niveaux Originaux - R√©solution Visuelle")
    print("=" * 80)
    print("R√©solution du benchmark XSokoban avec algorithme FESS")
    print("Visualisation des features et notation des coordonn√©es")
    print("=" * 80)
    
    # Chemin vers la collection
    original_path = os.path.join('../src', 'levels', 'Original & Extra', 'Original.txt')
    
    if not os.path.exists(original_path):
        print(f"‚ùå Fichier non trouv√©: {original_path}")
        return
    
    # Options de configuration
    print(f"\nüìã Configuration:")
    print(f"1. Mode visuel complet (premiers niveaux avec d√©tails)")
    print(f"2. Mode performance (tous les niveaux, moins de d√©tails)")
    print(f"3. Mode test (5 premiers niveaux seulement)")
    
    choice = input(f"\n‚ùì Votre choix (1/2/3): ").strip()
    
    if choice == '1':
        visual_mode = True
        max_levels = 90
        max_time = 60.0
        print(f"üî¨ Mode visuel complet activ√©")
    elif choice == '2':
        visual_mode = False
        max_levels = 90
        max_time = 30.0
        print(f"‚ö° Mode performance activ√©")
    else:  # choice == '3' ou d√©faut
        visual_mode = True
        max_levels = 5
        max_time = 120.0
        print(f"üß™ Mode test activ√© (5 niveaux)")
    
    # Cr√©er le r√©solveur
    solver = FESS90LevelsSolver(original_path, max_time)
    
    # Lancer la r√©solution
    print(f"\nüöÄ D√©marrage de la r√©solution...")
    stats = solver.solve_all_levels(visual_mode=visual_mode, max_levels=max_levels)
    
    # R√©sum√© final
    if stats:
        print(f"\nüéØ MISSION ACCOMPLIE!")
        print(f"‚úÖ {stats['solved_count']}/{stats['total_count']} niveaux r√©solus")
        print(f"‚è±Ô∏è  Temps total: {stats['total_time']:.2f}s")
        print(f"üìä Taux de r√©ussite: {stats['success_rate']*100:.1f}%")
        
        if stats['success_rate'] == 1.0:
            print(f"üèÜ PARFAIT: Tous les niveaux ont √©t√© r√©solus!")
            print(f"üî¨ L'algorithme FESS avec visualisation fonctionne correctement")
        else:
            print(f"üìà R√©sultats encourageants pour un prototype FESS")

if __name__ == "__main__":
    main()